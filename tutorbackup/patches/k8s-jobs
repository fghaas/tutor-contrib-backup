---
apiVersion: batch/v1
kind: Job
metadata:
  name: backup-restore-job
  labels:
    app.kubernetes.io/component: job
spec:
  template:
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - caddy
              topologyKey: "kubernetes.io/hostname"
      restartPolicy: Never
      containers:
        - name: backup
          image: {{ BACKUP_DOCKER_IMAGE }}
          env:
            - name: MYSQL_HOST
              value: '{{ MYSQL_HOST }}'
            - name: MYSQL_PORT
              value: '{{ MYSQL_PORT }}'
            - name: MYSQL_ROOT_USERNAME
              value: '{{ MYSQL_ROOT_USERNAME }}'
            - name: MYSQL_ROOT_PASSWORD
              value: '{{ MYSQL_ROOT_PASSWORD }}'
            - name: MONGODB_HOST
              value: '{{ MONGODB_HOST }}'
            - name: MONGODB_PORT
              value: '{{ MONGODB_PORT }}'
            - name: S3_SIGNATURE_VERSION
              value: '{{ BACKUP_S3_SIGNATURE_VERSION }}'
            - name: S3_ADDRESSING_STYLE
              value: '{{ BACKUP_S3_ADDRESSING_STYLE }}'
            - name: S3_REGION_NAME
              value: '{{ BACKUP_S3_REGION_NAME }}'
            - name: S3_USE_SSL
              value: '{{ BACKUP_S3_USE_SSL }}'
            {% if BACKUP_S3_HOST %}- name: S3_ENDPOINT_URL
              value: '{{ "https" if BACKUP_S3_USE_SSL else "http" }}://{{ BACKUP_S3_HOST }}{% if BACKUP_S3_PORT %}:{{ BACKUP_S3_PORT }}{% endif %}'{% endif %}
            - name: S3_ACCESS_KEY
              value: '{{ BACKUP_S3_ACCESS_KEY }}'
            - name: S3_SECRET_ACCESS_KEY
              value: '{{ BACKUP_S3_SECRET_ACCESS_KEY }}'
            - name: S3_BUCKET_NAME
              value: '{{ BACKUP_S3_BUCKET_NAME }}'
      {% if ENABLE_WEB_PROXY %}
          volumeMounts:
            - mountPath: /caddy/
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: caddy
      {% endif %}
{% if BACKUP_K8S_CRONJOB_BACKUP_SCHEDULE %}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-cron-job
  labels:
    app.kubernetes.io/component: cronjob
spec:
  failedJobsHistoryLimit: {{ BACKUP_K8S_CRONJOB_HISTORYLIMIT_FAILURE }}
  schedule: '{{ BACKUP_K8S_CRONJOB_BACKUP_SCHEDULE }}'
  successfulJobsHistoryLimit: {{ BACKUP_K8S_CRONJOB_HISTORYLIMIT_SUCCESS }}
  jobTemplate:
    spec:
      template:
        spec:
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - caddy
                  topologyKey: "kubernetes.io/hostname"
          restartPolicy: Never
          containers:
            - name: backup
              image: {{ BACKUP_DOCKER_IMAGE }}
              env:
                - name: MYSQL_HOST
                  value: '{{ MYSQL_HOST }}'
                - name: MYSQL_PORT
                  value: '{{ MYSQL_PORT }}'
                - name: MYSQL_ROOT_USERNAME
                  value: '{{ MYSQL_ROOT_USERNAME }}'
                - name: MYSQL_ROOT_PASSWORD
                  value: '{{ MYSQL_ROOT_PASSWORD }}'
                - name: MONGODB_HOST
                  value: '{{ MONGODB_HOST }}'
                - name: MONGODB_PORT
                  value: '{{ MONGODB_PORT }}'
                - name: S3_SIGNATURE_VERSION
                  value: '{{ BACKUP_S3_SIGNATURE_VERSION }}'
                - name: S3_ADDRESSING_STYLE
                  value: '{{ BACKUP_S3_ADDRESSING_STYLE }}'
                - name: S3_REGION_NAME
                  value: '{{ BACKUP_S3_REGION_NAME }}'
                - name: S3_USE_SSL
                  value: '{{ BACKUP_S3_USE_SSL }}'
                {% if BACKUP_S3_HOST %}- name: S3_ENDPOINT_URL
                  value: '{{ "https" if BACKUP_S3_USE_SSL else "http" }}://{{ BACKUP_S3_HOST }}{% if BACKUP_S3_PORT %}:{{ BACKUP_S3_PORT }}{% endif %}'{% endif %}
                - name: S3_ACCESS_KEY
                  value: '{{ BACKUP_S3_ACCESS_KEY }}'
                - name: S3_SECRET_ACCESS_KEY
                  value: '{{ BACKUP_S3_SECRET_ACCESS_KEY }}'
                - name: S3_BUCKET_NAME
                  value: '{{ BACKUP_S3_BUCKET_NAME }}'
              command:
                - 'python'
                - 'backup_services.py'
                - '--upload'
          {% if ENABLE_WEB_PROXY %}
              volumeMounts:
                - mountPath: /caddy/
                  name: data
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: caddy
          {% endif %}
{% endif %}
{% if BACKUP_K8S_CRONJOB_RESTORE_SCHEDULE %}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: restore-cron-job
  labels:
    app.kubernetes.io/component: cronjob
spec:
  failedJobsHistoryLimit: {{ BACKUP_K8S_CRONJOB_HISTORYLIMIT_FAILURE }}
  schedule: '{{ BACKUP_K8S_CRONJOB_RESTORE_SCHEDULE }}'
  successfulJobsHistoryLimit: {{ BACKUP_K8S_CRONJOB_HISTORYLIMIT_SUCCESS }}
  jobTemplate:
    spec:
      template:
        spec:
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - caddy
                  topologyKey: "kubernetes.io/hostname"
          restartPolicy: Never
          containers:
            - name: backup
              image: {{ BACKUP_DOCKER_IMAGE }}
              env:
                - name: MYSQL_HOST
                  value: '{{ MYSQL_HOST }}'
                - name: MYSQL_PORT
                  value: '{{ MYSQL_PORT }}'
                - name: MYSQL_ROOT_USERNAME
                  value: '{{ MYSQL_ROOT_USERNAME }}'
                - name: MYSQL_ROOT_PASSWORD
                  value: '{{ MYSQL_ROOT_PASSWORD }}'
                - name: MONGODB_HOST
                  value: '{{ MONGODB_HOST }}'
                - name: MONGODB_PORT
                  value: '{{ MONGODB_PORT }}'
                - name: S3_SIGNATURE_VERSION
                  value: '{{ BACKUP_S3_SIGNATURE_VERSION }}'
                - name: S3_ADDRESSING_STYLE
                  value: '{{ BACKUP_S3_ADDRESSING_STYLE }}'
                - name: S3_REGION_NAME
                  value: '{{ BACKUP_S3_REGION_NAME }}'
                - name: S3_USE_SSL
                  value: '{{ BACKUP_S3_USE_SSL }}'
                {% if BACKUP_S3_HOST %}- name: S3_ENDPOINT_URL
                  value: '{{ "https" if BACKUP_S3_USE_SSL else "http" }}://{{ BACKUP_S3_HOST }}{% if BACKUP_S3_PORT %}:{{ BACKUP_S3_PORT }}{% endif %}'{% endif %}
                - name: S3_ACCESS_KEY
                  value: '{{ BACKUP_S3_ACCESS_KEY }}'
                - name: S3_SECRET_ACCESS_KEY
                  value: '{{ BACKUP_S3_SECRET_ACCESS_KEY }}'
                - name: S3_BUCKET_NAME
                  value: '{{ BACKUP_S3_BUCKET_NAME }}'
              command:
                - '/bin/bash'
                - '-c'
                - 'python download_from_s3.py && restore_services.sh'
          {% if ENABLE_WEB_PROXY %}
              volumeMounts:
                - mountPath: /caddy/
                  name: data
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: caddy
          {% endif %}
{% endif %}
